# # SIFT testing, find a good ratio
# (tH, tW) = img_rect.shape[:2]
# found = None
# for scale in np.linspace(0.6, 1.5, 30)[::-1]:
#     # resized_temp = imutils.resize(staff_template, width=int(staff_template.shape[1] * scale))
#     resized_temp = imutils.resize(qnote_template, width=int(qnote_template.shape[1] * scale))
#     r = qnote_template.shape[1] / float(resized_temp.shape[1])
#
#     if tH < resized_temp.shape[0] or tW < resized_temp.shape[1]:
#         break
#
#     # print("Scale: {0} ratio: {1}".format(scale, r))
#     staff_loc, img_temp, no_hits = template_match(img, img_rect, resized_temp, 0.8, RED)
#
#     if no_hits is False and (found is None or len(staff_loc[0]) > found[0]):
#         found = len(staff_loc[0]), scale, r, img_temp, resized_temp
#
#     # cv2.imshow("Testing", img_temp)
#     # cv2.waitKey(0)
# print("Best match at Scale: {0} ratio: {1} with {2} hits".format(found[1], found[2], found[0]))
# cv2.imwrite('symbols_found.png', found[3])  # Keep img file with rectangles
# cv2.imwrite('resizedTemplate.png', found[4])